@page "/metingen"
@attribute [StreamRendering]
@using Slim_Groenbeheer.Models
@inject ApiService ApiService

<PageTitle>Metingen</PageTitle>

<h1>Metingen</h1>

<p>Hier kun je alle sensorwaarden per kas bekijken.</p>

@if (metingenData == null || sensorData == null || kassenData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var kas in kassenData)
    {
        <h2>Kas: @kas.kas_nummer - Locatie: @kas.locatie</h2>

        var sensorsInKas = sensorData.Where(s => s.kas_id == kas.id).ToList();
        var metingenInKas = metingenData
            .Where(m => sensorsInKas.Any(s => s.id == m.sensor_id))
            .OrderBy(m => m.sensor_id)
            .ThenByDescending(m => m.moment)
            .ToList();

        <Grid TItem="MetingenData"
              Data="@metingenInKas"
              Class="table table-hover table-bordered"
              AllowPaging="true"
              PageSize="5"
              AllowSorting="true"
              Responsive="true">

            <GridColumns>
                <GridColumn TItem="MetingenData" HeaderText="Sensor">
                    @(sensorsInKas.FirstOrDefault(s => s.id == context.sensor_id)?.naam)
                </GridColumn>
                <GridColumn TItem="MetingenData" HeaderText="Waarde" SortKeySelector="item => item.waarde">
                    @context.waarde
                </GridColumn>
                <GridColumn TItem="MetingenData" HeaderText="Tijd" SortKeySelector="item => item.moment">
                    @context.moment.ToShortTimeString()
                </GridColumn>
                <GridColumn TItem="MetingenData" HeaderText="Datum" SortKeySelector="item => item.moment">
                    @context.moment.ToShortDateString()
                </GridColumn>
                <GridColumn TItem="MetingenData"
                            HeaderText="Status"
                            ColumnClass="@(item => GetStatusClass(item))">
                    @GetStatusLabel(context)
                </GridColumn>

            </GridColumns>

        </Grid>
    }
}

@code {

    private IEnumerable<SensorData>? sensorData;
    private IEnumerable<KassenData>? kassenData;
    private IEnumerable<MetingenData>? metingenData;

    //private IEnumerable<MetingenData>? employees;
    protected override async Task OnInitializedAsync()
    {
        sensorData = await ApiService.GetSensorDataAsync();
        kassenData = await ApiService.GetKassenDataAsync();
        metingenData = await ApiService.GetMetingenDataAsync();
    }

    private string GetStatusClass(MetingenData meting)
{
    var sensor = sensorData?.FirstOrDefault(s => s.id == meting.sensor_id);
    if (sensor == null) return "table-secondary";

    return sensor.naam.ToLower().Contains("vocht")
            ? (meting.waarde < 50 ? "table-warning"
           : meting.waarde <= 70 ? "table-success"
           : "table-info")
        : (meting.waarde < 18 ? "table-primary"
           : meting.waarde <= 25 ? "table-success"
           : "table-danger");
}

private string GetStatusLabel(MetingenData meting)
{
    var sensor = sensorData?.FirstOrDefault(s => s.id == meting.sensor_id);
    if (sensor == null) return "Onbekend";

    if (sensor.naam.ToLower().Contains("vocht"))
    {
        return meting.waarde < 50 ? "Droog"
             : meting.waarde <= 70 ? "Normaal"
             : "Vochtig";
    }
    else
    {
        return meting.waarde < 18 ? "Koud"
             : meting.waarde <= 25 ? "Normaal"
             : "Warm";
    }
}




    private async Task<GridDataProviderResult<MetingenData>> EmployeesDataProvider(GridDataProviderRequest<MetingenData> request)
    {
        if (metingenData is null || sensorData is null || kassenData is null){ 
         
            sensorData = await ApiService.GetSensorDataAsync();
            kassenData = await ApiService.GetKassenDataAsync();
            metingenData = await ApiService.GetMetingenDataAsync();
        }
        return await Task.FromResult(request.ApplyTo(metingenData));
    }

    private IEnumerable<MetingenData> GetEmployees()
    {
        return metingenData ?? new List<MetingenData>();
       
    }
}
